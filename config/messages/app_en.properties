app.title=Voting for a restaurant
app.stackTitle=Technology stack:
app.description=<a href="https://https://github.com/ivanustinov/voting ">Java Enterprise project</a> with registration/authorization and role-based access rights (USER, ADMIN). \
Application for voting for a restaurant where the company's employees go for lunch. Voting starts in the morning and ends at a certain time, \
set by the administrator. After reaching this time, users have the opportunity to view the voting result (a button on the UI will be drawn): restaurant, \
the menu and the number of votes cast for it. The user can re-vote before the voting time expires, but only the result of the last \
vote will be taken into account. The administrator can create/edit/delete users, restaurants, dishes via UI \
(via AJAX) and via the REST interface with basic authorization. It is possible to copy menu groups for certain dates and then edit them. You \
can view the last menu of the restaurant and select several dishes to copy them to the current menu. \
You cannot create and edit menus for past dates, except for deleting them. The entire REST interface is covered by JUnit tests using Spring MVC Test and Spring Security Test. \
There are a lot of employees of the company, so I made caching of the most frequent requests (menu for today, voting result, authentication method (for REST). Implemented switching \
locales to Russian and English.

app.login=Log in as
app.profile=profile
app.register=Registration
app.registered=You are registered. Please Sign in.

user.title=Users
user.name=Name
user.email=Email
user.roles=Roles
user.password=Password
user.add=Create user
user.edit=Edit user
user.saved=User saved
user.deleted=User deleted

restaurants.title=Restaurants
restaurant.one=Restaurant
restaurant.add=Create restaurant
restaurant.edit=Edit restaurant
restaurant.name=Title
restaurant.saved=Restaurant saved
restaurant.deleted=Restaurant deleted
restaurant.name_duplicate=A restaurant named [{0}] already exists
restaurant.unexisting=Restaurant with id [{0}] does not exist

menu.title=Menu
menu.on=Menu for
menu.last=Menu for the last date
menu.add=Create menu
menu.edit=Edit menu
menu.saved=Menu saved
menu.deleted=Menu deleted
menu.copy=Menu copied
menu.restaurant=Select restaurant

menu.date=Select date for menu:
menu_list.name=Menu list

dish.add=Add dish
dish.saved=Dish saved
dish.deleted=Dish deleted
dish.edit=Edit dish
dish.create_in_the_past=You can edit the menu only for the current or future dates
dish.price=Price
dish.name=Name
dish.last=Last menu
dish.title=Restaurant menu
dish.dishes=Dishes
dish.name_duplicate=A dish with name [{0}] already exists

common.back=Back
common.add=Create
common.date=Date
common.establish=Establish
common.select=Select
common.deleted=Record deleted
common.delete=Delete
common.edit=Edit
common.copy=Copy
commom.copied=The record is copied
common.saved=Record saved
commons.saved=Records saved
common.confirm=Are you shure?
common.save=Save
common.create=Create
common.cancel=Cancel
common.search=Search
common.voted=Selected
common.restaurant=Restaurant
common.restaurants=Restaurants
common.on=on

voting.vote=Select
voting.history=Voting history
voting.time=Voting end time:
voting.time_left=Voting time left:
voting.time_is_up=You can re-vote only until the end of the voting time
voting.result=Result
voting.before_time=The results of the voting cannot be viewed until the end of the voting
voting.name=Voting
voting.count=number of votes:
voting.time_enabled=The time is set
voting.no_votes=There were no votes during the day {0}

exception.user.duplicateEmail=User with this email already exists
exception.user.updateRestriction=Admin/User update is forbidden
exception.meal.duplicateDateTime=You already have meal with this date/time

error.appError=Application error
error.dataNotFound=Data not found
error.dataError=Data error
error.validationError=Validation error
error.wrongRequest=Wrong request

NotEmpty=[{0}] must not be empty
NotBlank=[{0}] must not be empty
NotNull=[{0}] must not be empty
Email= Invalid format of [{0}]
Range=[{0}] must be between {2} and {1}
Length=[{0}] length must be between {2} and {1}
Size=[{0}] size must be between {2} and {1}
NotBlank.dish.name=Field [{0}] must not be empty
NotNull.dish.price=Field [{0}] must not be empty
NotNull.dish.date=Field [{0}] must not be empty
NotBlank.restaurant.name=Field [{0}] must not be empty